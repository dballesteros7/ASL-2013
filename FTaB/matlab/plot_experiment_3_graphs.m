%% Plot response times for all server configurations

responsetime_read = import_statistics_experiment_1('statistics_responsetime_read.csv');
responsetime_send = import_statistics_experiment_1('statistics_responsetime_send.csv');
responsetime_averages = zeros(3, 4);
responsetime_stdev = zeros(2,4);
responsetime_90 = zeros(3,4);

for i = 2:4
    for j = 2:5
        string_value_read = responsetime_read{i,j};
        string_cells_read = strsplit(string_value_read, ':');
        string_value_send = responsetime_send{i,j};
        string_cells_send = strsplit(string_value_send, ':');
        responsetime_averages(i - 1, j - 1) = mean([str2double(string_cells_send{1}), str2double(string_cells_read{1})]);
        responsetime_stdev(i - 1, j - 1) = mean([str2double(string_cells_send{2}), str2double(string_cells_read{2})]);
        responsetime_90(i - 1, j - 1) = mean([str2double(string_cells_send{3}), str2double(string_cells_read{3})]);
    end
end

N = [40, 80, 120, 200];
T = [2, 5, 10];

for i = 1:3
    figure;
    h1 = errorbar(N, responsetime_averages(i,:), responsetime_stdev(i,:));
    h2 = line(N, responsetime_90(i,:));
    hLegend = legend([h1, h2], 'Mean', '90% percentile');
    set(hLegend, 'location', 'NorthWest');
    hTitle  = title (sprintf('Experimental response time (T = %d)', T(i)));
    hXLabel = xlabel('Number of clients');
    hYLabel = ylabel('Response time (ms)');
    ylim([0, 1000]);
    set([hTitle, hXLabel, hYLabel], 'FontName','Helvetica');
    set([hXLabel, hYLabel], 'FontSize', 14);
    set(hTitle, 'FontSize', 16, 'FontWeight', 'bold');
    set(gca, 'FontSize', 12);
    set(gca, ...
      'Box'         , 'off'     , ...
      'TickDir'     , 'out'     , ...
      'TickLength'  , [.02 .02] , ...
      'XMinorTick'  , 'on'      , ...
      'YMinorTick'  , 'on'      , ...
      'YGrid'       , 'on'      , ...
      'XColor'      , [.3 .3 .3], ...
      'YColor'      , [.3 .3 .3], ...
      'YTick'       , 0:50:1000, ...
      'LineWidth'   , 1         );
    set(h1                        , ...
      'LineWidth'       , 2 ,...
      'MarkerFaceColor', [125	158	192]/255,...
      'Marker'          , 'o'         , ...
      'MarkerSize'      , 8);
    set(h2                       , ...
      'LineWidth'       , 2 ,...
      'LineStyle',     '--',...
      'Color', [178	34	34]/255,...
      'Marker'          , 'o'         , ...
      'MarkerFaceColor', [139	26	26]/255,...
      'MarkerSize'      , 8);
    set(gcf, 'PaperPositionMode', 'auto');
    print(gcf, '-depsc2', sprintf('exp3_response_time_%d.eps', i))
    close;
end



%% Plot throughput for all server configurations

throughput_read = import_throughput_experiment_1('throughput_read.csv');
throughput_send = import_throughput_experiment_1('throughput_send.csv');
throughput_total = zeros(3, 4);

for i = 2:4
    for j = 2:5
        throughput_total(i - 1, j - 1) = throughput_read(i,j) + throughput_send(i,j);
    end
end

N = [40, 80, 120, 200];
T = [2, 5, 10];

for i = 1:3
    figure;
    h = line(N, throughput_total(i,:));
    hTitle  = title (sprintf('Experimental throughput (T = %d)', T(i)));
    hXLabel = xlabel('Number of clients');
    hYLabel = ylabel('Throughput (ops/s)');
    ylim([0, 200]);
    set([hTitle, hXLabel, hYLabel], 'FontName','Helvetica');
    set([hXLabel, hYLabel], 'FontSize', 14);
    set(hTitle, 'FontSize', 16, 'FontWeight', 'bold');
    set(gca, 'FontSize', 12);
    set(gca, ...
      'Box'         , 'off'     , ...
      'TickDir'     , 'out'     , ...
      'TickLength'  , [.02 .02] , ...
      'XMinorTick'  , 'on'      , ...
      'YMinorTick'  , 'on'      , ...
      'YGrid'       , 'on'      , ...
      'XColor'      , [.3 .3 .3], ...
      'YColor'      , [.3 .3 .3], ...
      'YTick'       , 0:10:500, ...
      'LineWidth'   , 1         );
    set(h                        , ...
      'LineWidth'       , 2 ,...
      'MarkerFaceColor', [125	158	192]/255,...
      'Marker'          , 'o'         , ...
      'MarkerSize'      , 8);
    set(gcf, 'PaperPositionMode', 'auto');
    print(gcf, '-depsc2', sprintf('exp3_throughput_%d.eps', i))
    close;
end
